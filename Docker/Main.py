# -*- coding: utf-8 -*-
"""Test_07_10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qAL8O3_uUZ2R6vaXHwPvVvBY3CnRV1JO

**Importation des bibliothèques**
"""


from sklearn.model_selection import train_test_split
import numpy
import pandas as pd
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import confusion_matrix,classification_report

import numpy as np
print("The version on numpy")
print(np.__version__)
print("\n")



"""**Préparation de la base FS1**"""

FE_1= pd.read_csv("FS1.txt",delimiter="	",header=None)
FE_1=numpy.array(FE_1,float)

X_e1 = FE_1[:,:]
#m=np.max(X_e1)
assert X_e1.shape==(2205, 600) #Test unitaire
print("The shape of FS1")
print(X_e1.shape)
print("\n")

"""**Préparation de la base PS2**"""

FE_2= pd.read_csv("PS2.txt",delimiter="	",header=None)
FE_2=numpy.array(FE_2,float)

X_e2 = FE_2[:,:]
assert X_e2.shape==(2205, 6000)#Test unitaire
print("The shape of PS2")
print(X_e2.shape)
print("\n")

"""**Préparation de la base Profile**"""

dataset_output= pd.read_csv("profile.txt",delimiter="	",header=None)
dataset_output=numpy.array(dataset_output,float)
dataset_output = dataset_output[:,1]
dataset_output_new= dataset_output.reshape(dataset_output.shape[0], )
assert dataset_output_new.shape==(2205,) #Test unitaire
print("The shape of the output")
print(dataset_output_new.shape)
print("\n")

"""**Visualisation de la base FS1**"""

df1 = pd.DataFrame(X_e1)
df1

"""**Visualisation de la base PS2**"""

df2 = pd.DataFrame(X_e2)
df2

"""**Visualisation de la base Profile**"""

label = pd.DataFrame(dataset_output)
label

"""**Affecter "1" pour le cycle à 100 sinon "0"**"""

Y=label[0]
for i in range (len(Y)):
  if (Y[i]==100):
    Y[i]=1
  else:
    Y[i]=0

"""**Combiner les entrées, résultat une base de 6600 features et 2205 exemples**"""

nsamples, nx = df1.shape
nsamples, ny = df2.shape

dataset=np.zeros((nsamples,nx+ny))
print("The shape of all dataset")
print(dataset.shape)
print("\n")

dataset[:,0:nx]=df1
dataset[:,nx:]=df2
assert dataset.shape==(2205, 6600) #Test unitaire
print(dataset.shape)
print("\n")


"""**Répartition entre l'apprentissage et test**"""

x_train=dataset[:2000]
assert x_train.shape==(2000, 6600) #Test unitaire

x_test=dataset[2000:]
assert x_test.shape==(205, 6600) #Test unitaire

y_train=Y[:2000]
assert y_train.shape==(2000,) #Test unitaire
y_test=Y[2000:]
assert y_test.shape==(205,) #Test unitaire

print("The shape of training and test set")
print(x_train.shape)
print(x_test.shape)
print(y_train.shape)
print(y_test.shape)
print("\n")

"""### **Tester le Random Forest Classifier pour la classifcation**"""



rfc = RandomForestClassifier(n_estimators=150,criterion='gini',
                             random_state=42, min_samples_split = 4,
                             min_samples_leaf= 3, max_features = "log2",
                             oob_score = True, verbose = 9,
                             class_weight = "balanced",
                             min_weight_fraction_leaf = 0.00,
                             n_jobs = 10, warm_start = True,
                             )

print("Start the training")
rfc.fit(x_train,y_train)
print("\n")

"""**Evaluer les perfromances de test**"""

predicted_output = rfc.predict(x_test)
print("The predicted output")
print(predicted_output)
print("\n")


"""**Construire la matrice de confusion et générer le rapport de classification**"""

print("The confusion matrix")
print (confusion_matrix(y_test,predicted_output))
print("\n")
print("The report classification")
print(classification_report(y_test,predicted_output))
print("\n")